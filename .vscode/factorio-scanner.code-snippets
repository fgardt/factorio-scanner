{
	// Place your factorio-scanner workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New Prototype File": {
		"prefix": "newproto",
		"body": [
			"use serde::{Deserialize, Serialize};",
			"use serde_with::skip_serializing_none;",
			"",
			"use super::{helper, EntityWithOwnerPrototype};",
			"use crate::data_raw::types::*;",
			"",
			"/// [`Prototypes/$1Prototype`](https://lua-api.factorio.com/latest/prototypes/$1Prototype.html)",
			"#[derive(Debug, Deserialize, Serialize)]",
			"pub struct $1Prototype(EntityWithOwnerPrototype<$1Data>);",
			"",
			"/// [`Prototypes/$1Prototype`](https://lua-api.factorio.com/latest/prototypes/$1Prototype.html)",
			"#[skip_serializing_none]",
			"#[derive(Debug, Serialize, Deserialize)]",
			"pub struct $1Data {}",
		]
	},
	"New Entity Name Type Map": {
		"prefix": "newentmap",
		"body": [
			"(*data.$1).keys().fold((), |(), name| {",
			"	entities.insert(name.clone(), EntityType::$2);",
			"});",
		]
	}
}